@model MedicalSuppliesWeb.ViewModels.Supplier.SupplierOrderVm


<!DOCTYPE html>
<html lang="en">
<head>

    <link rel="stylesheet" href="~/css/shared-style.css" />

</head>
<body>
    <div class="row">
        <partial name="_LeftColumn" />
        <div class="col-md-8 column">

            <partial name="_SearchBox" />




            @*DYNAMIC CONTENT BEGINS*@




            <h2 style="padding-left:280px; padding-top:80px; padding-bottom:30px">SUPPLIER ORDER</h2>

            <form method="post" asp-action="CreateOrder">


                <div class="card">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="supplierId">Supplier ID:</label>
                                    <input type="text" class="form-control" id="supplierId" name="SupplierId" value="" oninput="getSupplierDetails(this.value)" />
                                </div>
                            </div>


                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="supplierName">Supplier Name:</label>
                                    <input type="text" class="form-control" id="supplierName" name="SupplierName" value="@Model.SupplierName" />
                                </div>
                            </div>



                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="orderDate">Order Date:</label>
                                    <input type="text" class="form-control" id="orderDate" name="Date" value="@Model.Date.ToShortDateString()" />
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="shippingAddress">Shipping Address:</label>
                                    <textarea class="form-control" id="shippingAddress" name="ShippingAddress" rows="3">@Model.ShippingAddress</textarea>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="billingAddress">Billing Address:</label>
                                    <textarea class="form-control" id="billingAddress" name="BillingAddress" rows="3">@Model.BillingAddress</textarea>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="sameAddressCheckbox">
                                    <label class="form-check-label" for="sameAddressCheckbox">Same as Shipping Address</label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>



                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Items</h5>
                        <div id="product-container">
                            <!-- Initial product field -->
                            <div class="order-item">
                                <div class="row">
                                    <div class="col-md-5">
                                        <div class="form-group">
                                            <label for="productName">Product:</label>
                                            <input type="text" class="form-control product-name" name="SupplierOrderItems[0].ProductName" oninput="getProductUnitPrice(this.value,0)" />
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="form-group">
                                            <label for="quantity">Quantity:</label>
                                            <input type="text" class="form-control quantity" name="SupplierOrderItems[0].Quantity" oninput="updateLineTotal(0)" />
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="form-group">
                                            <label for="unitPrice">Unit Price:</label>
                                            <input type="text" class="form-control unit-price" name="SupplierOrderItems[0].UnitPrice" oninput="updateLineTotal(0)" />
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="form-group">
                                            <label for="lineTotal">Line total:</label>
                                            <input type="text" class="form-control line-total" name="SupplierOrderItems[0].LineTotal" />
                                        </div>
                                    </div>


                                    <div class="col-md-1">
                                        <div class="form-group">
                                            <label>&nbsp;</label>
                                            <button type="button" class="btn btn-outline-danger btn-sm" onclick="deleteProductField(${productIndex})">Delete</button>
                                        </div>
                                    </div>



                                </div>
                            </div>
                        </div>
                        <div style="display: flex; justify-content: flex-end;">
                            <button type="button" id="add-product" class="btn btn-outline-dark btn-sm"> + </button>
                        </div>


                    </div>
                </div>



                <div class="card">
                    <div class="card-body">

                        <div class="row">
                            <div class="col-md-4">

                                <div class="form-group">
                                    <label for="orderTotal">Order Total:</label>
                                    <input type="text" class="form-control" id="orderTotal" name="OrderTotal" value="@Model.SupplierOrderTotal" />
                                </div>

                            </div>

                            <div class="col-md-2">
                                <div class="form-group">
                                    <label for="taxAmount">Tax Rate:</label>
                                    <input type="text" class="form-control" id="taxRate" name="TaxRate" value="5" />
                                </div>
                            </div>

                            <div class="col-md-2">

                                <div class="form-group">
                                    <label for="taxAmount">Tax Amount:</label>
                                    <input type="text" class="form-control" id="taxAmount" name="TaxAmount" value="@Model.TaxAmount" />
                                </div>
                            </div>

                            <div class="col-md-4">

                                <div class="form-group">
                                    <label for="grandTotal">Grand Total:</label>
                                    <input type="text" class="form-control" id="grandTotal" name="GrandTotal" value="@Model.GrandTotal" />
                                </div>
                            </div>


                        </div>




                        <div style="display: flex; justify-content: center; padding:10px">
                            <button type="submit" class="btn btn-outline-dark">Create</button>
                        </div>
                    </div>
                </div>


            </form>


            @*/END/*@

        </div>

        <partial name="_RightColumn" />
    </div>




    <script src="~/js/DateTime.js"></script>


    <script>
        var shippingAddressTextarea = document.getElementById("shippingAddress");
        var billingAddressTextarea = document.getElementById("billingAddress");
        var sameAddressCheckbox = document.getElementById("sameAddressCheckbox");

        sameAddressCheckbox.addEventListener("change", function () {
            if (this.checked) {
                billingAddressTextarea.value = shippingAddressTextarea.value;
                billingAddressTextarea.disabled = true;
                billingAddressTextarea.classList.add("text-muted");
            } else {
                billingAddressTextarea.value = "";
                billingAddressTextarea.disabled = false;
                billingAddressTextarea.classList.remove("text-muted");
            }
        });
    </script>

    <script>
        var productContainer = document.getElementById("product-container");
        var addProductButton = document.getElementById("add-product");
        var productIndex = 0;

        function addProductField() {


            var newProductField = document.createElement("div");
            newProductField.classList.add("order-item");
            productIndex++;
            var currentIndex = productIndex;
            newProductField.innerHTML = `
                                    <div class="row">
                                        <div class="col-md-5">
                                            <div class="form-group">
                                                <label for="productName">Product:</label>
                                                        <input type="text" class="form-control product-name" name="SupplierOrderItems[${productIndex}].ProductName" oninput="getProductUnitPrice(this.value, ${productIndex})"/>
                                            </div>
                                        </div>
                                        <div class="col-md-2">
                                            <div class="form-group">
                                                <label for="quantity">Quantity:</label>
                                                        <input type="text" class="form-control quantity" name="SupplierOrderItems[${productIndex}].Quantity" oninput="updateLineTotal(${productIndex})" />
                                            </div>
                                        </div>
                                        <div class="col-md-2">
                                            <div class="form-group">
                                                <label for="unitPrice">Unit Price:</label>
                                                        <input type="text" class="form-control unit-price" name="SupplierOrderItems[${productIndex}].UnitPrice" oninput="updateLineTotal(${productIndex})" />
                                            </div>
                                        </div>
                                        <div class="col-md-2">
                                            <div class="form-group">
                                                <label for="lineTotal">Line total:</label>
                                                <input type="text" class="form-control line-total" name="SupplierOrderItems[${productIndex}].LineTotal" />
                                            </div>
                                        </div>


                                         <div class="col-md-1">
                                               <div class="form-group">
                                                   <label>&nbsp;</label>
                                                   <button type="button" class="btn btn-outline-danger btn-sm" onclick="deleteProductField(${productIndex})">Delete</button>
                                                </div>
                                         </div>



                                    </div>`;

            productContainer.appendChild(newProductField);
            getProductUnitPrice("", currentIndex);
        }


        addProductButton.addEventListener("click", addProductField);
    </script>


    <script>
        // Get the current date
        var currentDate = new Date();

        // Format the date as yyyy-mm-dd
        var year = currentDate.getFullYear();
        var month = String(currentDate.getMonth() + 1).padStart(2, '0');
        var day = String(currentDate.getDate()).padStart(2, '0');
        var formattedDate = year + '-' + month + '-' + day;

        // Set the default value of the orderDate input field
        document.getElementById('orderDate').value = formattedDate;
    </script>


    <script>
        function getSupplierDetails(supplierId) {

            fetch(`/Supplier/GetSupplierDetails?supplierId=${supplierId}`)
                .then(response => response.json())
                .then(data => {
                    if (data) {

                        document.getElementById("supplierName").value = data.supplierName;
                    } else {

                        document.getElementById("supplierName").value = "";
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }
    </script>





    <script>


        let fetchCounter = 0;
        function getProductUnitPrice(productName, index) {
            const currentFetchCounter = ++fetchCounter; // Increment fetchCounter for each fetch operation

            fetch(`/Product/GetProductUnitPrice?productName=${productName}`)
                .then(response => response.json())
                .then(data => {
                    if (data && currentFetchCounter === fetchCounter) {
                        const unitPriceInput = document.getElementsByName(`SupplierOrderItems[${index}].UnitPrice`)[0];
                        const lineTotalInput = document.getElementsByName(`SupplierOrderItems[${index}].LineTotal`)[0];

                        unitPriceInput.value = data.unitPrice;
                        updateLineTotal(index);
                    } else if (currentFetchCounter === fetchCounter) {
                        const unitPriceInput = document.getElementsByName(`SupplierOrderItems[${index}].UnitPrice`)[0];
                        unitPriceInput.value = "";
                        updateLineTotal(index);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }


        function updateLineTotal(index) {
            const quantity = parseFloat(document.getElementsByName(`SupplierOrderItems[${index}].Quantity`)[0].value);
            const unitPrice = parseFloat(document.getElementsByName(`SupplierOrderItems[${index}].UnitPrice`)[0].value);


            const lineTotal = isNaN(quantity) || isNaN(unitPrice) ? 0 : quantity * unitPrice;

            document.getElementsByName(`SupplierOrderItems[${index}].LineTotal`)[0].value = lineTotal.toFixed(2);
            updateOrderTotal();
        }


        function updateOrderTotal() {
            let orderTotal = 0;
            const lineTotalInputs = document.querySelectorAll(".line-total");
            lineTotalInputs.forEach(input => {
                orderTotal += parseFloat(input.value);
            });
            const taxRate = parseFloat(document.getElementById("taxRate").value);

            // Calculate the tax amount (order total * tax rate)
            const taxAmount = orderTotal * (taxRate / 100);

            // Calculate the grand total (order total + tax amount)
            const grandTotal = orderTotal + taxAmount;

            // Update the values in the HTML input fields
            document.getElementById("orderTotal").value = orderTotal.toFixed(2);
            document.getElementById("taxAmount").value = taxAmount.toFixed(2);
            document.getElementById("grandTotal").value = grandTotal.toFixed(2);
        }


        function deleteProductField(index) {
            var productField = document.querySelector(`[name="SupplierOrderItems[${index}].ProductName"]`).closest(".order-item");
            productField.remove();

            // Update the productIndex for the remaining product fields
            var remainingProductFields = document.querySelectorAll(".order-item");
            /*productIndex = 0;*/ // Reset productIndex to 0 before updating it
            remainingProductFields.forEach((field, newIndex) => {
                var productNameInput = field.querySelector(".product-name");
                var quantityInput = field.querySelector(".quantity");
                var unitPriceInput = field.querySelector(".unit-price");
                var lineTotalInput = field.querySelector(".line-total");

                productNameInput.name = `SupplierOrderItems[${newIndex}].ProductName`;
                quantityInput.name = `SupplierOrderItems[${newIndex}].Quantity`;
                unitPriceInput.name = `SupplierOrderItems[${newIndex}].UnitPrice`;
                lineTotalInput.name = `SupplierOrderItems[${newIndex}].LineTotal`;

                var deleteButton = field.querySelector(".btn-outline-danger");
                deleteButton.setAttribute("onclick", `deleteProductField(${newIndex})`);
                /*productIndex = newIndex;*/ // Update the productIndex for the next iteration
            });

            updateOrderTotal();
        }


    </script>












</body>
</html>
